import 'dart:convert';
import 'dart:typed_data';

import 'dart:ui';

import 'package:umbra_flutter/umbra_flutter.dart';

/// {@template simple}
/// A Dart Shader class for the `simple` shader.
/// {@endtemplate}
class Simple extends UmbraShader {
  Simple._() : super(_cachedProgram!);

  /// {@macro simple}
  static Future<Simple> compile() async {
    try {
      // Caching the program on the first compile call.
      _cachedProgram ??= await FragmentProgram.compile(
        spirv: Uint8List.fromList(base64Decode(_spirv)).buffer,
      );

      return Simple._();
    } catch (err) {
      if (err is Exception) {
        throw UmbraException(err);
      }
      rethrow;
    }
  }

  static FragmentProgram? _cachedProgram;

  Shader shader({
    required Size resolution,
  }) {
    return program.shader(
      floatUniforms: Float32List.fromList([
        resolution.width,
        resolution.height,
      ]),
      samplerUniforms: [],
    );
  }
}

const _spirv =
    'AQID';
