import 'dart:convert';
import 'dart:typed_data';
import 'dart:ui';

import 'package:umbra_flutter/umbra_flutter.dart';

/// {@template with_uniforms}
/// A Flutter Widget for the `with_uniforms` shader.
/// {@endtemplate}
class WithUniforms extends UmbraWidget {
  /// {@macro with_uniforms}
  const WithUniforms({
    super.key,
    super.blendMode = BlendMode.src,
    super.child,
    super.errorBuilder,
    super.compilingBuilder,
    required Vector2 position,
    required Vector3 coordinates,
    required Vector4 color,
    required double mixValue,
    required Image image,
  })  : _position = position,
        _coordinates = coordinates,
        _color = color,
        _mixValue = mixValue,
        _image = image,
        super();

  static Future<FragmentProgram>? _cachedProgram;

  final Vector2 _position;

  final Vector3 _coordinates;

  final Vector4 _color;

  final double _mixValue;

  final Image _image;

  @override
  List<double> getFloatUniforms() {
    return [
      _position.x,
      _position.y,
      _coordinates.x,
      _coordinates.y,
      _coordinates.z,
      _color.x,
      _color.y,
      _color.z,
      _color.w,
      _mixValue,
    ];
  }

  @override
  List<ImageShader> getSamplerUniforms() {
    return [
      ImageShader(
        _image,
        TileMode.clamp,
        TileMode.clamp,
        UmbraShader.identity,
      ),
    ];
  }

  @override
  Future<FragmentProgram> program() {
    return _cachedProgram ??
        FragmentProgram.compile(
          spirv: Uint8List.fromList(base64Decode(_spirv)).buffer,
        );
  }
}

const _spirv =
    'AQID';
