import 'dart:typed_data';

import 'dart:ui';

import 'package:umbra_flutter/umbra_flutter.dart';

/// {@template with_uniforms}
/// A Dart Shader class for the `with_uniforms` shader.
/// {@endtemplate}
class WithUniforms extends UmbraShader {
  WithUniforms._(
    Image texture, { 
    required Vector2 position,
    required Vector3 coordinates,
    required Vector4 color,
    required double mixValue,
    required Image image,
  }) : super(
          _cachedProgram!,
          floatUniforms: [
            position.x,
            position.y,
            coordinates.x,
            coordinates.y,
            coordinates.z,
            color.x,
            color.y,
            color.z,
            color.w,
            mixValue,
          ],
          samplers: [
            texture,
            image,
          ],
        );

  /// {@macro with_uniforms}
  static Future<WithUniforms> compile(
    Image texture, { 
    required Vector2 position,
    required Vector3 coordinates,
    required Vector4 color,
    required double mixValue,
    required Image image,
  }) async {
    // Caching the program on the first compile call.
    _cachedProgram ??= await FragmentProgram.compile(
      spirv: ByteData.sublistView(Uint8List.fromList(_binary)).buffer,
    );

    return WithUniforms._(
      texture,
      position: position,
      coordinates: coordinates,
      color: color,
      mixValue: mixValue,
      image: image,
    );
  }

  static FragmentProgram? _cachedProgram;
}

const _binary = <int>[1, 2, 3];
