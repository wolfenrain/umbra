import 'dart:convert';
import 'dart:typed_data';

import 'dart:ui';

import 'package:umbra_flutter/umbra_flutter.dart';

/// {@template with_uniforms}
/// A Dart Shader class for the `with_uniforms` shader.
/// {@endtemplate}
class WithUniforms extends UmbraShader {
  WithUniforms._() : super(_cachedProgram!);

  /// {@macro with_uniforms}
  static Future<WithUniforms> compile() async {
    // Caching the program on the first compile call.
    _cachedProgram ??= await FragmentProgram.compile(
      spirv: Uint8List.fromList(base64Decode(_spirv)).buffer,
    );

    return WithUniforms._();
  }

  static FragmentProgram? _cachedProgram;

  Shader shader({
    required Size resolution,
    required Vector2 position,
    required Vector3 coordinates,
    required Vector4 color,
    required double mixValue,
    required Image image,
    required Matrix4 matrix,
  }) {
    return program.shader(
      floatUniforms: Float32List.fromList([
        position.x,
        position.y,
        coordinates.x,
        coordinates.y,
        coordinates.z,
        color.x,
        color.y,
        color.z,
        color.w,
        mixValue,
        matrix.storage[0],
        matrix.storage[1],
        matrix.storage[2],
        matrix.storage[3],
        matrix.storage[4],
        matrix.storage[5],
        matrix.storage[6],
        matrix.storage[7],
        matrix.storage[8],
        matrix.storage[9],
        matrix.storage[10],
        matrix.storage[11],
        matrix.storage[12],
        matrix.storage[13],
        matrix.storage[14],
        matrix.storage[15],
        resolution.width,
        resolution.height,
      ]),
      samplerUniforms: [
        ImageShader(
          image,
          TileMode.clamp,
          TileMode.clamp,
          UmbraShader.identity,
        ),
      ],
    );
  }
}

const _spirv =
    'AQID';
